@page
@model HWLRazor.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
    var fileUploaded = Model.FileUploaded;
}



<div class="text-center">
    <img src="~/images/Horizon2016_WideWL.png" alt="Horizon Well Logging, Inc." class="img-fluid logo" />
    <p>Upload your HWL file to analyze it:</p>
</div>

<div class="row">
    <div class="col-md-6 offset-md-3 @(fileUploaded ? "hidden" : "")">
        <form method="post" enctype="multipart/form-data">
            <div class="form-group">
                <input type="file" asp-for="UploadedFile" class="form-control-file">
            </div>
            <button type="submit" class="btn btn-primary">Upload</button>
        </form>
        <p>@Model.Message</p>
    </div>
</div>

@if (fileUploaded)

{
    <div class="row">
        <div class="col-md-6">
            <h1>@Model.HwlData.WellInfo.Well</h1>
            <p>@Model.HwlData.WellInfo.Company</p>
        </div>
    </div>
    @using System.Reflection
    @using System.Text.Json;

    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#programTable" aria-expanded="false" aria-controls="programTable">
    Program Info
</button>
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#wellInfoTable" aria-expanded="false" aria-controls="wellInfoTable">
    Well Info
</button>
    @if (Model.HwlData.Annotations != null)
{
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#annotationsTable" aria-expanded="false" aria-controls="annotationsTable">
        Annotations
    </button>
}
    @if(Model.HwlData.CasingPoints != null) {
<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#casingpointsTable" aria-expanded="false" aria-controls="casingpointsTable">
        Casing Points
</button>
    }
    @if(Model.HwlData.NewBits != null) {
<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#newbitsTable" aria-expanded="false" aria-controls="newbitsTable">
    New Bits
</button>
    }
    @if(Model.HwlData.LithologyLegend != null) {
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#lithLegendTable" aria-expanded="false" aria-controls="lithLegendTable">
            Lithology Legend
    </button>
            }
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#descriptionsTable" aria-expanded="false" aria-controls="descriptionsTable">
    Descriptions
</button>

    @if (Model.HwlData.Type == "OG")
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#plotScalesTable" aria-expanded="false" aria-controls="plotScalesTable">
            Plot Scales
    </button>}


    <div class="collapse" id="programTable">
        <table class="table">
            <tr>
                <th>Label</th>
                <th>Value</th>
            </tr>
            @{
                var programProperties = Model.HwlData.ProgramInfo.GetType().GetProperties();
                foreach (PropertyInfo property in programProperties)
                {
                    object value = property.GetValue(Model.HwlData.ProgramInfo);
                    if (value is List<string> listValue)
                    {
                        value = string.Join(", ", listValue);
                    }

                    <tr>
                        <td>@property.Name</td>
                        <td>@value</td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="collapse" id="wellInfoTable">
            <table class="table">
                <tr>
                    <th>Label</th>
                    <th>Value</th>
                </tr>
                @{
                    var wellInfoProperties = Model.HwlData.WellInfo.GetType().GetProperties();
                    foreach (PropertyInfo property in wellInfoProperties)
                    {
                        object value = property.GetValue(Model.HwlData.WellInfo);
                        if (value is List<string> listValue)
                        {
                            value = string.Join(", ", listValue);
                        }

                        <tr>
                            <td>@property.Name</td>
                            <td>@value</td>
                    </tr>
                }
            }
        </table>
    </div>
    if (Model.HwlData.Annotations != null)
    {
        <div class="collapse" id="annotationsTable">
            <table class="table">
                <tr>
                    <th>Depth</th>
                    <th>Text</th>
                </tr>
                @foreach (var annotation in Model.HwlData.Annotations)
                {
                    var fontStyle = annotation.Italic ? "italic" : "normal";
                    var textDecoration = annotation.Underline ? "underline" : "none";
                    var fontWeight = annotation.Bold ? "bold" : "normal";
                    <tr>
                        <td>@annotation.Depth</td>
                        <td style="font-size: @annotation.FontHeight; font-family: '@annotation.Font'; font-style: @fontStyle; text-decoration: @textDecoration; color: @annotation.Color; font-weight: @fontWeight;">
                            @annotation.Text
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
    @if(Model.HwlData.CasingPoints != null) {
    <div class="collapse" id="casingpointsTable">
        <table class="table">
            <thead>
                @if(Model.HwlData.CasingPoints.Count > 0) {
                    @Html.Raw(Model.RenderTableHeaderProperty(Model.HwlData.CasingPoints[0]))
                }
            </thead>
            <tbody>
                @foreach (var item in Model.HwlData.CasingPoints)
                {
                    @Html.Raw(Model.RenderTableRowProperty(item))
                }
            </tbody>
        </table>
    </div>
    }
    @if(Model.HwlData.NewBits != null) {
    <div class="collapse" id="newbitsTable">
        <table class="table">
            <thead>
                @if(Model.HwlData.NewBits.Count > 0) {
                    @Html.Raw(Model.RenderTableHeaderProperty(Model.HwlData.NewBits[0]))
                }
            </thead>
            <tbody>
                @foreach (var item in Model.HwlData.NewBits)
                {
                    @Html.Raw(Model.RenderTableRowProperty(item))
                }
            </tbody>
        </table>
    </div>
    }
    @if(Model.HwlData.LithologyLegend != null) {
    <div class="collapse" id="lithLegendTable">
        <table class="table">
                <tr>
                    <th>Number</th>
                    <th>Lithology</th>
                </tr>
            <tbody>
                @foreach (var item in Model.HwlData.LithologyLegend)
                {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                        </tr>
                }
            </tbody>
        </table>
    </div>
    }
    if (Model.HwlData.Descriptions != null)
    {
        <div class="collapse" id="descriptionsTable">
            <table class="table">
                <tr>
                    <th>Depth</th>
                    <th>Text</th>
                </tr>
                @foreach (var description in Model.HwlData.Descriptions)
                {
                    var fontStyle = description.Italic ? "italic" : "normal";
                    var textDecoration = description.Underlined ? "underline" : "none";
                    var fontWeight = description.Bold ? "bold" : "normal";
                    <tr>
                        <td>@description.Depth</td>
                        <td style="font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', sans-serif; font-style: @fontStyle; text-decoration: @textDecoration; color: @description.Color; font-weight: @fontWeight;">
                            @description.Description
                        </td>
                    </tr>
                }
            </table>
        </div>
    }

    @if (Model.HwlData.Type == "OG")
    {
        <div class="collapse" id="plotScalesTable">
            <table class="table">
                <thead>
                    <tr>
                        <th>Depth</th>
                        @{
                            int parameterIndex = 0;
                        }
                        @foreach (var parameter in Model.HwlData.PlotteDrillingParameters)
                        {
                            int? position = parameter.OGPlotScalePosition;
                            int? overscalePosition = parameter.OGPlotOverscalePosition;

                            if (position.HasValue)
                            {
                                <th data-parameter-index="@parameterIndex">@parameter.ShortName</th>
                            }

                            if (overscalePosition.HasValue)
                            {
                                <th data-parameter-index="@parameterIndex">@parameter.ShortName Ovr</th>
                            }
                            parameterIndex++;
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int rowIndex = 0; rowIndex < Model.HwlData.PlotScales.Count; rowIndex++)
                    {
                        var plotScale = Model.HwlData.PlotScales[rowIndex];
                        <tr>
                            <td>@plotScale[0]</td>
                            @{
                                int colIndex = 1;
                            }
                            @foreach (var parameter in Model.HwlData.PlotteDrillingParameters)
                            {
                                <td contenteditable="true" class="editable-cell" data-row="@rowIndex" data-col="@colIndex">@parameter.PlotScales[Convert.ToDouble(@plotScale[0])]</td>
                                colIndex++;
                                <td contenteditable="true" class="editable-cell" data-row="@rowIndex" data-col="@colIndex">@parameter.PlotOverscales[Convert.ToDouble(@plotScale[0])]</td>
                                colIndex++;
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button id="saveButton" type="submit" style="display: none;">Save</button>
        @section Scripts {
            <script>
                // Get all editable cells
                const editableCells = document.querySelectorAll(".editable-cell");

                // Function to show the save button
                function showSaveButton() {
                document.getElementById("saveButton").style.display = "block";
                }

                function getEditedParameterIndex() {
                const editedCell = document.querySelector(".editable-cell.edited");
                if (editedCell) {
                    const colIndex = parseInt(editedCell.getAttribute("data-col"));
                    const header = document.querySelector(`th[data-parameter-index="${colIndex - 1}"]`);
                    const editedParameterIndex = parseInt(header.getAttribute("data-parameter-index"));
                    return editedParameterIndex;
                }
                return null;
                }

                // Add input event listeners to all editable cells and mark as edited
                editableCells.forEach(cell => {
                cell.addEventListener("input", function () {
                    showSaveButton();
                    cell.classList.add("edited");
                });
                });

                document.getElementById("saveButton").addEventListener("click", function (e) {
                e.preventDefault();
                const editedCells = [];

                editableCells.forEach(input => {
                    if (input.classList.contains("edited")) {
                    const row = parseInt(input.getAttribute("data-row"));
                    const col = parseInt(input.getAttribute("data-col"));

                    console.log(input);

                    editedCells.push({
                        row: row,
                        col: col,
                        newValue: input.innerText
                    });
                    }
                });

                console.log(editedCells);

                fetch('/Index?handler=UpdatePlotScales', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ editedCells: editedCells }) // Wrap editedCells in an object
                    }).then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            alert("Error saving data.");
                            throw new Error("Error saving data.");
                        }
                    }).then(data => {
                        if (data.success) {
                            alert("Data saved successfully.");
                            updateTable(editedCells); // Update the table without reloading the page
                            console.log("Updated HwlData:", data.hwlData); // Log the updated HwlData object to the console
                        }
                    }).catch(error => {
                        console.error("Error:", error);
                    });
                });

                // Function to refresh the table
                function updateTable(editedCells) {
                editedCells.forEach(cell => {
                    const row = cell.row;
                    const col = cell.col;
                    const newValue = cell.newValue;

                    const table = document.querySelector(".table");
                    const tableRow = table.rows[row + 1]; // +1 to account for the header row
                    const tableCell = tableRow.cells[col];

                    tableCell.innerText = newValue;
                });
                }
            </script>
        }
    }

    var warnings = Model.TestScalesForPlottedParameters();
    <script>
    @{
        var serializedWarnings = JsonSerializer.Serialize(warnings);
    }
    let warnings = JSON.parse('@Html.Raw(serializedWarnings)');
    console.log("Warnings:", warnings); // Log the warnings to the console

    if (warnings.length > 0) {
        let allWarnings = warnings.join('\n');
        alert(allWarnings);
    }
</script>

}