@page
@using System.Text.Json
@model IndexModel
@{
    ViewData["Title"] = "HWL Sanitizer";
    var fileUploaded = Model.FileUploaded;
}


<input type="hidden" id="fileContentBase64" value="@Model.FileContentBase64"/>
<div class="text-center">
    <img src="~/images/Horizon2016_WideWL.png" alt="Horizon Well Logging, Inc." class="img-fluid logo"/>
    <p>Upload your HWL file:</p>
</div>

<div class="row">
    <div class="col-md-6 offset-md-3 @(fileUploaded ? "hidden" : "")">
        <form method="post" enctype="multipart/form-data">
            <div class="form-group">
                <input type="file" asp-for="UploadedFile" class="form-control-file">
            </div>
            <button type="submit" class="btn btn-primary">Upload</button>
        </form>
        <p>@Model.Message</p>
    </div>
</div>

@if (fileUploaded)

{
    <div class="row">
        <div class="col-md-6">
            <h1>@Model.HwlData.WellInfo.Well</h1>
            <p>@Model.HwlData.WellInfo.Company</p>
        </div>
    </div>

    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#programTable" aria-expanded="false" aria-controls="programTable">
        Program Info
    </button>
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#wellInfoTable" aria-expanded="false" aria-controls="wellInfoTable">
        Well Info
    </button>
    @if (Model.HwlData.Annotations != null)
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#annotationsTable" aria-expanded="false" aria-controls="annotationsTable">
            Annotations
        </button>
    }
    @if (Model.HwlData.CasingPoints != null)
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#casingpointsTable" aria-expanded="false" aria-controls="casingpointsTable">
            Casing Points
        </button>
    }
    @if (Model.HwlData.NewBits != null)
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#newbitsTable" aria-expanded="false" aria-controls="newbitsTable">
            New Bits
        </button>
    }
    @if (Model.HwlData.LithologyLegend != null)
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#lithLegendTable" aria-expanded="false" aria-controls="lithLegendTable">
            Lithology Legend
        </button>
    }
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#descriptionsTable" aria-expanded="false" aria-controls="descriptionsTable">
        Descriptions
    </button>
    @if (Model.HwlData.Type == "OG")
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#plotScalesTable" aria-expanded="false" aria-controls="plotScalesTable">
            Plot Scales
        </button>
    }
    @if (Model.HwlData.Type == "GEO")
    {
        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#headerScalesTable" aria-expanded="false" aria-controls="headerScalesTable">
            Header Scales
        </button>
    }
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#rawFileData" aria-expanded="false" aria-controls="rawFileData" onclick="loadRawFileContent()">
        Show Raw Text
    </button>

    <div class="d-flex mt-3">
        <button id="saveButton" data-well-type="@Model.HwlData.Type" type="submit" class="btn btn-primary me-1" style="display: none;">Save</button>
        <button id="exportButton" type="submit" class="btn btn-primary me-1" style="display: none;">Export</button>
        <button id="fixScalesButton" type="button" class="btn btn-primary me-1" style="display: none;">Fix Scales</button>
        <button id="autoSetAllScalesButton" type="button" class="btn btn-primary">Auto-Set All Scales</button>
    </div>




    <div class="collapse" id="programTable">
        <table class="table">
            <tr>
                <th>Label</th>
                <th>Value</th>
            </tr>
            @{
                var programProperties = Model.HwlData.ProgramInfo.GetType().GetProperties();
                foreach (var property in programProperties)
                {
                    var value = property.GetValue(Model.HwlData.ProgramInfo);
                    if (value is List<string> listValue)
                    {
                        value = string.Join(", ", listValue);
                    }

                    <tr>
                        <td>@property.Name</td>
                        <td>@value</td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="collapse" id="wellInfoTable">
        <table class="table">
            <tr>
                <th>Label</th>
                <th>Value</th>
            </tr>
            @{
                var wellInfoProperties = Model.HwlData.WellInfo.GetType().GetProperties();
                foreach (var property in wellInfoProperties)
                {
                    var value = property.GetValue(Model.HwlData.WellInfo);
                    if (value is List<string> listValue)
                    {
                        value = string.Join(", ", listValue);
                    }

                    <tr>
                        <td>@property.Name</td>
                        <td>@value</td>
                    </tr>
                }
            }
        </table>
    </div>
    @if (Model.HwlData.Annotations != null)
    {
        <div class="collapse" id="annotationsTable">
            <table class="table">
                <tr>
                    <th>Depth</th>
                    <th>Text</th>
                </tr>
                @foreach (var annotation in Model.HwlData.Annotations)
                {
                    var fontStyle = annotation.Italic ? "italic" : "normal";
                    var textDecoration = annotation.Underline ? "underline" : "none";
                    var fontWeight = annotation.Bold ? "bold" : "normal";
                    <tr>
                        <td>@annotation.Depth</td>
                        <td style="color: @annotation.Color; font-family: '@annotation.Font'; font-size: @annotation.FontHeight; font-style: @fontStyle; font-weight: @fontWeight; text-decoration: @textDecoration;">
                            @annotation.Text
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
    @if (Model.HwlData.CasingPoints != null)
    {
        <div class="collapse" id="casingpointsTable">
            <table class="table">
                <thead>
                @if (Model.HwlData.CasingPoints.Count > 0)
                {
                    @Html.Raw(Model.RenderTableHeaderProperty(Model.HwlData.CasingPoints[0]))
                }
                </thead>
                <tbody>
                @foreach (var item in Model.HwlData.CasingPoints)
                {
                    @Html.Raw(Model.RenderTableRowProperty(item))
                }
                </tbody>
            </table>
        </div>
    }
    @if (Model.HwlData.NewBits != null)
    {
        <div class="collapse" id="newbitsTable">
            <table class="table">
                <thead>
                @if (Model.HwlData.NewBits.Count > 0)
                {
                    @Html.Raw(Model.RenderTableHeaderProperty(Model.HwlData.NewBits[0]))
                }
                </thead>
                <tbody>
                @foreach (var item in Model.HwlData.NewBits)
                {
                    @Html.Raw(Model.RenderTableRowProperty(item))
                }
                </tbody>
            </table>
        </div>
    }
    @if (Model.HwlData.LithologyLegend != null)
    {
        <div class="collapse" id="lithLegendTable">
            <table class="table">
                <tr>
                    <th>Number</th>
                    <th>Lithology</th>
                </tr>
                <tbody>
                @foreach (var item in Model.HwlData.LithologyLegend)
                {
                    <tr>
                        <td>@item.Key</td>
                        <td>@item.Value</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    @if (Model.HwlData.Descriptions != null)
    {
        <div class="collapse" id="descriptionsTable">
            <table class="table">
                <tr>
                    <th>Depth</th>
                    <th>Text</th>
                </tr>
                @foreach (var description in Model.HwlData.Descriptions)
                {
                    var fontStyle = description.Italic ? "italic" : "normal";
                    var textDecoration = description.Underlined ? "underline" : "none";
                    var fontWeight = description.Bold ? "bold" : "normal";
                    <tr>
                        <td>@description.Depth</td>
                        <td style="color: @description.Color; font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', sans-serif; font-style: @fontStyle; font-weight: @fontWeight; text-decoration: @textDecoration;">
                            @description.Description
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
    @if (Model.HwlData.Type == "OG")
    {
        <div class="collapse" id="plotScalesTable">
            <table class="table">
                <thead>
                <tr>
                    <th>Depth</th>
                    @{
                        var parameterIndex = 0;
                    }
                    @foreach (var parameter in Model.HwlData.PlottedDrillingParameters)
                    {
                        var position = parameter.OGPlotScalePosition;
                        var overscalePosition = parameter.OGPlotOverscalePosition;

                        if (position.HasValue)
                        {
                            <th data-parameter-index="@parameterIndex">@parameter.DisplayName</th>
                        }

                        if (overscalePosition.HasValue)
                        {
                            <th data-parameter-index="@parameterIndex">@parameter.DisplayName Ovr</th>
                        }
                        parameterIndex++;
                    }
                </tr>
                </thead>
                <tbody>
                @for (var rowIndex = 0; rowIndex < Model.HwlData.PlotScales.Count; rowIndex++)
                {
                    var plotScale = Model.HwlData.PlotScales[rowIndex];
                    <tr>
                        <td>@plotScale[0]</td>
                        @{
                            var colIndex = 1;
                        }
                        @foreach (var parameter in Model.HwlData.PlottedDrillingParameters)
                        {
                            <td contenteditable="true" class="editable-cell" data-row="@rowIndex" data-col="@colIndex">@parameter.PlotScales[Convert.ToDouble(plotScale[0])]</td>
                            colIndex++;
                            <td contenteditable="true" class="editable-cell" data-row="@rowIndex" data-col="@colIndex">@parameter.PlotOverscales[Convert.ToDouble(plotScale[0])]</td>
                            colIndex++;
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    @if (Model.HwlData.Type == "GEO")
    {
        <div class="collapse" id="headerScalesTable">
            <table class="table">
                <thead>
                <tr>
                    @{
                        var parameterIndex = 0;
                    }
                    @foreach (var parameter in Model.HwlData.PlottedDrillingParameters)
                    {
                        var scale = parameter.HeaderScale;
                        if (scale.HasValue)
                        {
                            <th data-parameter-index="@parameterIndex">@parameter.DisplayName</th>
                        }
                        parameterIndex++;
                    }
                </tr>
                </thead>
                <tbody>
                <tr>
                    @{
                        var colIndex = 0;
                    }
                    @foreach (var parameter in Model.HwlData.PlottedDrillingParameters)
                    {
                        var scale = parameter.HeaderScale;

                        if (scale.HasValue)
                        {
                            <td contenteditable="true" class="editable-cell" data-row="0" data-col="@colIndex">@scale</td>
                            colIndex++;
                        }
                    }
                </tr>
                </tbody>
            </table>
        </div>
    }
    <div class="collapse" id="rawFileData">
        <pre id="rawFileContent"></pre>
    </div>


    var warnings = Model.TestScales();

@section Scripts{
    <script>
    
        //Check and warn for scale issues
        @{ var serializedWarnings = JsonSerializer.Serialize(warnings); }
        let warnings = JSON.parse('@Html.Raw(serializedWarnings)');
        console.log("Warnings:", warnings); // Log the warnings to the console
        if (warnings.length > 0) {
            let allWarnings = warnings.map(warning => warning.Message).join('\n');
            alert(allWarnings);
            document.getElementById("fixScalesButton").style.display = "block"; // Show the "Fix Scales" button
        }
        
        //Replace all bad scales with suggested scale values
        document.getElementById("fixScalesButton").addEventListener("click", (event) => updateScalesWithSuggestedValues(event));
        function updateScalesWithSuggestedValues() {
            fetch('/Index?handler=ApplySuggestedScales', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log("Suggested scales applied");
                    console.log("Updated HwlData:", data.hwlData); // Log the updated HwlData object
                    
                    showExportButton(); // Show the export button

                    // Show confirmation message and hide the 'Fix Scales' button
                    alert("Data saved successfully.");
                    //document.getElementById("fixScalesButton").style.display = "none";
                } else {
                    console.error("Error applying suggested scales");
                }
            })
            .catch(error => {
                console.error("Error:", error);
            });
        }
        
        document.getElementById("autoSetAllScalesButton").addEventListener("click", autoSetAllScales);

        function autoSetAllScales() {
    fetch('/Index?handler=AutoSetAllScales', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("All suggested scales applied");
            console.log("Updated HwlData:", data.hwlData);

            showExportButton();

            // Show confirmation message and hide the 'Auto-Set All Scales' button
            alert("All scales have been auto-set successfully.");
            document.getElementById("autoSetAllScalesButton").style.display = "none";

            // Update the header scales table
            updateHeaderScalesTable(data.hwlData.PlottedDrillingParameters);
        } else {
            console.error("Error auto-setting all scales");
        }
    })
    .catch(error => {
        console.error("Error:", error);
    });
}


    function loadRawFileContent() {
        const rawFileContentElement = document.getElementById("rawFileContent");
        if (!rawFileContentElement.innerText) {
            fetch('/Index?handler=GetRawFileContent', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => response.text())
                .then(rawFileContent => {
                    rawFileContentElement.innerText = rawFileContent;
                });
        }
    }

    // Get all editable cells
    const editableCells = document.querySelectorAll(".editable-cell");

    // Function to show the save button
    function showSaveButton() {
        document.getElementById("saveButton").style.display = "block";
    }

    // Function to show the export button
    function showExportButton() {
        document.getElementById("exportButton").style.display = "block";
    }

    function getEditedParameterIndex() {
        const editedCell = document.querySelector(".editable-cell.edited");
        if (editedCell) {
            const colIndex = parseInt(editedCell.getAttribute("data-col"));
            const header = document.querySelector(`th[data-parameter-index="${colIndex - 1}"]`);
            const editedParameterIndex = parseInt(header.getAttribute("data-parameter-index"));
            return editedParameterIndex;
        }
        return null;
    }

    // Add input event listeners to all editable cells and mark as edited
    editableCells.forEach(cell => {
        cell.addEventListener("input", function () {
            showSaveButton();
            cell.classList.add("edited");
        });
    });

    //Function to export the saved changes to a new hwl file
    document.getElementById("exportButton").addEventListener("click", function (e) {
        e.preventDefault();

        fetch("/Index?handler=ExportData")
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    alert("Error fetching export data.");
                    throw new Error("Error fetching export data.");
                }
            })
            .then(data => {
                const rawText = data.rawText;
                const fileContent = rawText.join("\r\n");

                const blob = new Blob([fileContent], { type: "text/plain" });
                const url = URL.createObjectURL(blob);

                const link = document.createElement("a");
                link.href = url;
                link.download = "exported_data.hwl";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error("Error:", error);
            });
    });

    //Function to save header or plot scale changes to the HwlData object
    document.getElementById("saveButton").addEventListener("click", function (e) {
        e.preventDefault();
        const editedCells = [];
        const wellType = e.target.getAttribute("data-well-type");

        editableCells.forEach(input => {
            if (input.classList.contains("edited")) {
                const row = parseInt(input.getAttribute("data-row"));
                const col = parseInt(input.getAttribute("data-col"));

                editedCells.push({
                    row: row,
                    col: col,
                    newValue: input.innerText
                });
            }
        });

        // Choose the appropriate handler based on the well type
        const handler = wellType.toUpperCase() === "GEO" ? "UpdateHeaderScales" : "UpdatePlotScales";

        fetch(`/Index?handler=${handler}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ editedCells: editedCells }) // Wrap editedCells in an object
        }).then(response => {
            if (response.ok) {
                return response.json();
            } else {
                alert("Error saving data.");
                throw new Error("Error saving data.");
            }
        }).then(data => {
            if (data.success) {
                alert("Data saved successfully.");
                updateTable(editedCells); // Update the table without reloading the page
                showExportButton();
            }
        }).catch(error => {
            console.error("Error:", error);
        });
    });

    // Function to refresh the table
    function updateTable(editedCells) {
        editedCells.forEach(cell => {
            const row = cell.row;
            const col = cell.col;
            const newValue = cell.newValue;

            const table = document.querySelector(".table");
            const tableRow = table.rows[row + 1]; // +1 to account for the header row
            const tableCell = tableRow.cells[col];

            tableCell.innerText = newValue;
        });
    }

    function saveFileContentToLocalStorage() {
        const fileContentBase64 = document.getElementById("fileContentBase64").value;
        if (fileContentBase64) {
            localStorage.setItem("hwlDataFileContent", fileContentBase64);
        }
        }

    // Call the function after the page loads
    document.addEventListener("DOMContentLoaded", function () {
        saveFileContentToLocalStorage();
    });

    function getFileContentFromLocalStorage() {
        const fileContentBase64 = localStorage.getItem("hwlDataFileContent");
        if (fileContentBase64) {
            return atob(fileContentBase64);
        }
        return null;
    }
    
    </script>
    }
}